import styled from 'styled-components';
import { Field as CHECKBOX } from @nx-vision/fields;
import { Field as EMAIL } from @nx-vision/fields;
import { Field as NCSD } from @nx-vision/fields;
import { Field as NCSDS } from @nx-vision/fields;
import { Field as NCSDSS } from @nx-vision/fields;
import { Field as NUMBERFIELD } from @nx-vision/fields;
import { Field as NUMBERD } from @nx-vision/fields;
import { Field as NUMBERDS } from @nx-vision/fields;
import { Field as NUMBERDSS } from @nx-vision/fields;
import { Field as NUMBERDSSS } from @nx-vision/fields;
import { Field as NUMBERDSSSS } from @nx-vision/fields;
import { Field as NUMBERS } from @nx-vision/fields;
import { Field as NUMBERSS } from @nx-vision/fields;
import { Field as NUMBERSSS } from @nx-vision/fields;
import { Field as NUMBSD } from @nx-vision/fields;
import { Field as NUMBSDS } from @nx-vision/fields;
import { Field as NUMBSDSS } from @nx-vision/fields;
import { Field as NUMBSDSSS } from @nx-vision/fields;
import { Field as NUMBSDSSSS } from @nx-vision/fields;
import { Field as TEXTFIELD } from @nx-vision/fields;
import { Field as NCSDSSS } from @nx-vision/fields;

import { Key, useEffect, useState } from 'react';
const StyledApp = styled.div`
  font-family: sans-serif;

  background-color: ;
`;

const DragAndDropOptions = styled.div`
  background-color: lightgray;
  padding: 5px;
  min-width: 250px;
  max-width: 250px;
`;

const SettingsOptions = styled.div`
  background-color: lightgray;
  padding: 5px;
  min-width: 250px;
  max-width: 250px;
`;

const FieldOption = styled.div``;

const TemplateDiv = styled.div`
  min-height: 100px;
  background-color: #dddddd;
  border: 5px solid white;
`;

const templateJson=[{
  className:"col-md-6",
  name:"div1"
},
{className:"col-md-6",
  name:"div2"
},
{className:"col-md-12",
  name:"div3"
},
{
  className:"col-md-6",
  name:"div4"
},
{className:"col-md-6",
  name:"div5"
},
{className:"col-md-12",
  name:"div6"
}]

export const App=()=> {
    const [fieldDetails,setFieldDetails] = useState({fieldName:""});
    const [selectedFieldDetails,setSelectedFieldDetails] = useState<IFieldDetails>({title:"",div:"",index:0});
    const [templateData,setTemplateData] = useState<IFieldObject>({})
  const onDragStart = (ev: any, id: string) => {
    setFieldDetails({fieldName:id});
    console.log(fieldDetails);
    ev.dataTransfer.setData('id', id);
  };

  const onDragOver = (ev: any) => {
    ev.preventDefault();
    ev.stopPropagation();
  };

  useEffect(()=>{
    const templateInitialObject = {} as any;
    templateJson.forEach(element => {
      templateInitialObject[element.name] = [];
    });
    setTemplateData(templateInitialObject)
  },[])

  useEffect(()=>{
    console.log(selectedFieldDetails);
  },[selectedFieldDetails])

  const onDrop = (ev: any, cat: keyof IFieldObject) => {

    const templateDataCopy = templateData;
    templateData[cat]= [...templateData[cat] , {name:fieldDetails.fieldName,title:"Field"}];
    setTemplateData(templateDataCopy);
    setFieldDetails({fieldName:""});
  };

  const editTitle=(value:string,div:string,index:number)=>{
    const templateDataCopy = templateData;
    const inputObject = templateDataCopy[div][index];
    inputObject.title = value;
    templateDataCopy[div][index] = inputObject;
    setTemplateData(prev=>({...prev,[div]:templateDataCopy[div]}));

  }

   const onDragClick=(e:any,name:string)=>{
    setFieldDetails({fieldName:name});
   }

  const DragField = (props: any) => {
    return (
      <FieldOption
        onDrag={(e) => onDragStart(e, props.field)}
        draggable
        id={'t.id'}
        onClick={(e) => onDragClick(e, props.field)}
      >
        {props.children}
      </FieldOption>
    );
  };

  return (
    <div className="container-fluid" style={{ width: '100%' }}>
      <StyledApp className="row">
        <DragAndDropOptions className="col-md-3">
          <DragField field="checkBox">
            <CheckBox
              onChange={(value) => {
                console.log(value);
              }}
              onDoubleClick={(e) =>{return null}}
              title={'check box'}
            />
          </DragField>
          <DragField field="textfield">
            <TextField
              onChange={(value) => {
                console.log(value);
              }}
              onDoubleClick={(e) =>{return null}}
              title={'text field'}
            />
          </DragField>
        </DragAndDropOptions>
        <div className="col-md-7 row">
            {
             templateJson.map((value,index)=>{
                return <TemplateDiv key={index}
                className={value.className}
                onDragOver={(e) => onDragOver(e)}
                onDrop={(e) => onDrop(e, value.name)}
              >
              { templateData[value.name] &&
              templateData[value.name].map((field:fieldInterface,index:number)=>{
                switch (field.name) {
                  case "checkBox":
                      return <CheckBox
                            onChange={(value) => {
                              console.log(value);
                            }}
                            onDoubleClick={(e) => setSelectedFieldDetails({title:e.title,div:value.name,index:index})}
                            title={field.title}
                          />
                    break;
                    case "textfield":
                      return <TextField
                            onChange={(value) => {
                              console.log(value);
                            }}
                            onDoubleClick={(e) => setSelectedFieldDetails({title:e.title,div:value.name,index:index})}

                            title={field.title}
                          />
                    break;
                  default:
                    return null;
                    break;
                }
              })
              }
              </TemplateDiv>
              })
            }
        </div>
        {selectedFieldDetails &&
        <SettingsOptions>
            <p>title</p>
            <input type="text"
            value={selectedFieldDetails && selectedFieldDetails.title}
            onChange={(value)=>{
              setSelectedFieldDetails(prev =>({...prev,title:value.target.value}));
              editTitle(value.target.value,selectedFieldDetails.div,selectedFieldDetails.index);
            }}
            onMouseLeave={()=>{
              editTitle(selectedFieldDetails.title,selectedFieldDetails.div,selectedFieldDetails.index)
            }}
            />

        </SettingsOptions>
}
      </StyledApp>

    </div>
  );
}

interface IFieldObject{
  [div1:string]:fieldInterface[]
}

interface fieldInterface{
  name:string,
  title:string
}

interface IFieldDetails{
  title:string,
  div:string,
  index:number
}

export default App;
